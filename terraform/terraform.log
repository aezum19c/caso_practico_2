---------------------------------
---------------------------------
TERRAFORM EAST US - CUENTA PROPIA
---------------------------------
---------------------------------
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/azurerm from the dependency lock file
- Using previously-installed hashicorp/azurerm v2.46.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform plan
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # azurerm_linux_virtual_machine.myVM1 will be created
  + resource "azurerm_linux_virtual_machine" "myVM1" {
      + admin_username                  = "ubuntu"
      + allow_extension_operations      = true
      + computer_name                   = (known after apply)
      + disable_password_authentication = true
      + extensions_time_budget          = "PT1H30M"
      + id                              = (known after apply)
      + location                        = "eastus"
      + max_bid_price                   = -1
      + name                            = "my-first-azure-vm-cp2"
      + network_interface_ids           = (known after apply)
      + priority                        = "Regular"
      + private_ip_address              = (known after apply)
      + private_ip_addresses            = (known after apply)
      + provision_vm_agent              = true
      + public_ip_address               = (known after apply)
      + public_ip_addresses             = (known after apply)
      + resource_group_name             = "kubernetes_rg_cp2"
      + size                            = "Standard_D2s_v3"
      + tags                            = {
          + "environment" = "CP2"
        }
      + virtual_machine_id              = (known after apply)
      + zone                            = (known after apply)

      + admin_ssh_key {
          + public_key = <<-EOT
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCw1LrD23lMlUbu2rx1oUvkhhobqT9oBBqgncx26vkDxK215Saxfvf6ovubpuR6q99fs3csuhsArGan4957xqjusLo24Ct0Y87FxY2wHKUSN9Lxr209SRsJuA7nrcyT4Eq3/FK3bfuJzULDP1P5YphLpqgIysU5FwQs4syc7uo5l8qM7nUt5DcWvtzd7jJDAEA6kBKBTwoIVeHUiWrh5sdNNJKDuBTt8Tq2LWo8Vxqj5gufVlcyarQwmaR6KtPqSld7GHdee5ASeQLs+jC9vFF3EXnTW6tXeo6Y7dSwRaf+/OtN5ICkf3FdB9fDYkiTGRGsjBLsYKKJ6GgxPsY1FP5ECNZwxpCkVJ6FXGgh8mcvI3UlXgODlhxm7m6JOq1GraXfxfrCPkh6sQ40i1AuQ8dru+DXqzyfX84P9AIWQ0o73SWXAY9L+YBMxPXae5/CbuZfrpTyVGk1jSqAoeA0KcV9VHuinJ+zvNJ70s89vPyED1/iviEICusjlZpvj8bEjNE= ubuntu@ubuntu-zisac
            EOT
          + username   = "ubuntu"
        }

      + boot_diagnostics {
          + storage_account_uri = (known after apply)
        }

      + os_disk {
          + caching                   = "ReadWrite"
          + disk_size_gb              = (known after apply)
          + name                      = (known after apply)
          + storage_account_type      = "Standard_LRS"
          + write_accelerator_enabled = false
        }

      + plan {
          + name      = "centos-8-stream-free"
          + product   = "centos-8-stream-free"
          + publisher = "cognosys"
        }

      + source_image_reference {
          + offer     = "centos-8-stream-free"
          + publisher = "cognosys"
          + sku       = "centos-8-stream-free"
          + version   = "22.03.28"
        }
    }

  # azurerm_network_interface.myNic1 will be created
  + resource "azurerm_network_interface" "myNic1" {
      + applied_dns_servers           = (known after apply)
      + dns_servers                   = (known after apply)
      + enable_accelerated_networking = false
      + enable_ip_forwarding          = false
      + id                            = (known after apply)
      + internal_dns_name_label       = (known after apply)
      + internal_domain_name_suffix   = (known after apply)
      + location                      = "eastus"
      + mac_address                   = (known after apply)
      + name                          = "vmniccp2"
      + private_ip_address            = (known after apply)
      + private_ip_addresses          = (known after apply)
      + resource_group_name           = "kubernetes_rg_cp2"
      + tags                          = {
          + "environment" = "CP2"
        }
      + virtual_machine_id            = (known after apply)

      + ip_configuration {
          + name                          = "myipconfigurationcp2"
          + primary                       = (known after apply)
          + private_ip_address            = "10.0.1.10"
          + private_ip_address_allocation = "static"
          + private_ip_address_version    = "IPv4"
          + public_ip_address_id          = (known after apply)
          + subnet_id                     = (known after apply)
        }
    }

  # azurerm_network_interface_security_group_association.mySecGroupAssociation1 will be created
  + resource "azurerm_network_interface_security_group_association" "mySecGroupAssociation1" {
      + id                        = (known after apply)
      + network_interface_id      = (known after apply)
      + network_security_group_id = (known after apply)
    }

  # azurerm_network_security_group.mySecGroup will be created
  + resource "azurerm_network_security_group" "mySecGroup" {
      + id                  = (known after apply)
      + location            = "eastus"
      + name                = "sshtrafficcp2"
      + resource_group_name = "kubernetes_rg_cp2"
      + security_rule       = [
          + {
              + access                                     = "Allow"
              + description                                = ""
              + destination_address_prefix                 = "*"
              + destination_address_prefixes               = []
              + destination_application_security_group_ids = []
              + destination_port_range                     = "22"
              + destination_port_ranges                    = []
              + direction                                  = "Inbound"
              + name                                       = "SSH"
              + priority                                   = 1001
              + protocol                                   = "Tcp"
              + source_address_prefix                      = "*"
              + source_address_prefixes                    = []
              + source_application_security_group_ids      = []
              + source_port_range                          = "*"
              + source_port_ranges                         = []
            },
        ]
      + tags                = {
          + "environment" = "CP2"
        }
    }

  # azurerm_public_ip.myPublicIp1 will be created
  + resource "azurerm_public_ip" "myPublicIp1" {
      + allocation_method       = "Dynamic"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + idle_timeout_in_minutes = 4
      + ip_address              = (known after apply)
      + ip_version              = "IPv4"
      + location                = "eastus"
      + name                    = "vmipcp2"
      + resource_group_name     = "kubernetes_rg_cp2"
      + sku                     = "Basic"
      + tags                    = {
          + "environment" = "CP2"
        }
    }

  # azurerm_resource_group.rg must be replaced
-/+ resource "azurerm_resource_group" "rg" {
      ~ id       = "/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg" -> (known after apply)
      ~ name     = "kubernetes_rg" -> "kubernetes_rg_cp2" # forces replacement
        tags     = {
            "environment" = "CP2"
        }
        # (1 unchanged attribute hidden)
    }

  # azurerm_storage_account.stAccount will be created
  + resource "azurerm_storage_account" "stAccount" {
      + access_tier                      = (known after apply)
      + account_kind                     = "StorageV2"
      + account_replication_type         = "LRS"
      + account_tier                     = "Standard"
      + allow_blob_public_access         = false
      + enable_https_traffic_only        = true
      + id                               = (known after apply)
      + is_hns_enabled                   = false
      + large_file_share_enabled         = (known after apply)
      + location                         = "eastus"
      + min_tls_version                  = "TLS1_0"
      + name                             = "staccountaezumcp2"
      + primary_access_key               = (sensitive value)
      + primary_blob_connection_string   = (sensitive value)
      + primary_blob_endpoint            = (known after apply)
      + primary_blob_host                = (known after apply)
      + primary_connection_string        = (sensitive value)
      + primary_dfs_endpoint             = (known after apply)
      + primary_dfs_host                 = (known after apply)
      + primary_file_endpoint            = (known after apply)
      + primary_file_host                = (known after apply)
      + primary_location                 = (known after apply)
      + primary_queue_endpoint           = (known after apply)
      + primary_queue_host               = (known after apply)
      + primary_table_endpoint           = (known after apply)
      + primary_table_host               = (known after apply)
      + primary_web_endpoint             = (known after apply)
      + primary_web_host                 = (known after apply)
      + resource_group_name              = "kubernetes_rg_cp2"
      + secondary_access_key             = (sensitive value)
      + secondary_blob_connection_string = (sensitive value)
      + secondary_blob_endpoint          = (known after apply)
      + secondary_blob_host              = (known after apply)
      + secondary_connection_string      = (sensitive value)
      + secondary_dfs_endpoint           = (known after apply)
      + secondary_dfs_host               = (known after apply)
      + secondary_file_endpoint          = (known after apply)
      + secondary_file_host              = (known after apply)
      + secondary_location               = (known after apply)
      + secondary_queue_endpoint         = (known after apply)
      + secondary_queue_host             = (known after apply)
      + secondary_table_endpoint         = (known after apply)
      + secondary_table_host             = (known after apply)
      + secondary_web_endpoint           = (known after apply)
      + secondary_web_host               = (known after apply)
      + tags                             = {
          + "environment" = "CP2"
        }
    }

  # azurerm_subnet.mySubnet will be created
  + resource "azurerm_subnet" "mySubnet" {
      + address_prefix                                 = (known after apply)
      + address_prefixes                               = [
          + "10.0.1.0/24",
        ]
      + enforce_private_link_endpoint_network_policies = false
      + enforce_private_link_service_network_policies  = false
      + id                                             = (known after apply)
      + name                                           = "terraformsubnetcp2"
      + resource_group_name                            = "kubernetes_rg_cp2"
      + virtual_network_name                           = "kubernetesnetcp2"
    }

  # azurerm_virtual_network.myNet will be created
  + resource "azurerm_virtual_network" "myNet" {
      + address_space         = [
          + "10.0.0.0/16",
        ]
      + guid                  = (known after apply)
      + id                    = (known after apply)
      + location              = "eastus"
      + name                  = "kubernetesnetcp2"
      + resource_group_name   = "kubernetes_rg_cp2"
      + subnet                = (known after apply)
      + tags                  = {
          + "environment" = "CP2"
        }
      + vm_protection_enabled = false
    }

Plan: 9 to add, 0 to change, 1 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform apply
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # azurerm_linux_virtual_machine.myVM1 will be created
  + resource "azurerm_linux_virtual_machine" "myVM1" {
      + admin_username                  = "ubuntu"
      + allow_extension_operations      = true
      + computer_name                   = (known after apply)
      + disable_password_authentication = true
      + extensions_time_budget          = "PT1H30M"
      + id                              = (known after apply)
      + location                        = "eastus"
      + max_bid_price                   = -1
      + name                            = "my-first-azure-vm-cp2"
      + network_interface_ids           = (known after apply)
      + priority                        = "Regular"
      + private_ip_address              = (known after apply)
      + private_ip_addresses            = (known after apply)
      + provision_vm_agent              = true
      + public_ip_address               = (known after apply)
      + public_ip_addresses             = (known after apply)
      + resource_group_name             = "kubernetes_rg_cp2"
      + size                            = "Standard_D2s_v3"
      + tags                            = {
          + "environment" = "CP2"
        }
      + virtual_machine_id              = (known after apply)
      + zone                            = (known after apply)

      + admin_ssh_key {
          + public_key = <<-EOT
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCw1LrD23lMlUbu2rx1oUvkhhobqT9oBBqgncx26vkDxK215Saxfvf6ovubpuR6q99fs3csuhsArGan4957xqjusLo24Ct0Y87FxY2wHKUSN9Lxr209SRsJuA7nrcyT4Eq3/FK3bfuJzULDP1P5YphLpqgIysU5FwQs4syc7uo5l8qM7nUt5DcWvtzd7jJDAEA6kBKBTwoIVeHUiWrh5sdNNJKDuBTt8Tq2LWo8Vxqj5gufVlcyarQwmaR6KtPqSld7GHdee5ASeQLs+jC9vFF3EXnTW6tXeo6Y7dSwRaf+/OtN5ICkf3FdB9fDYkiTGRGsjBLsYKKJ6GgxPsY1FP5ECNZwxpCkVJ6FXGgh8mcvI3UlXgODlhxm7m6JOq1GraXfxfrCPkh6sQ40i1AuQ8dru+DXqzyfX84P9AIWQ0o73SWXAY9L+YBMxPXae5/CbuZfrpTyVGk1jSqAoeA0KcV9VHuinJ+zvNJ70s89vPyED1/iviEICusjlZpvj8bEjNE= ubuntu@ubuntu-zisac
            EOT
          + username   = "ubuntu"
        }

      + boot_diagnostics {
          + storage_account_uri = (known after apply)
        }

      + os_disk {
          + caching                   = "ReadWrite"
          + disk_size_gb              = (known after apply)
          + name                      = (known after apply)
          + storage_account_type      = "Standard_LRS"
          + write_accelerator_enabled = false
        }

      + plan {
          + name      = "centos-8-stream-free"
          + product   = "centos-8-stream-free"
          + publisher = "cognosys"
        }

      + source_image_reference {
          + offer     = "centos-8-stream-free"
          + publisher = "cognosys"
          + sku       = "centos-8-stream-free"
          + version   = "22.03.28"
        }
    }

  # azurerm_network_interface.myNic1 will be created
  + resource "azurerm_network_interface" "myNic1" {
      + applied_dns_servers           = (known after apply)
      + dns_servers                   = (known after apply)
      + enable_accelerated_networking = false
      + enable_ip_forwarding          = false
      + id                            = (known after apply)
      + internal_dns_name_label       = (known after apply)
      + internal_domain_name_suffix   = (known after apply)
      + location                      = "eastus"
      + mac_address                   = (known after apply)
      + name                          = "vmniccp2"
      + private_ip_address            = (known after apply)
      + private_ip_addresses          = (known after apply)
      + resource_group_name           = "kubernetes_rg_cp2"
      + tags                          = {
          + "environment" = "CP2"
        }
      + virtual_machine_id            = (known after apply)

      + ip_configuration {
          + name                          = "myipconfigurationcp2"
          + primary                       = (known after apply)
          + private_ip_address            = "10.0.1.10"
          + private_ip_address_allocation = "static"
          + private_ip_address_version    = "IPv4"
          + public_ip_address_id          = (known after apply)
          + subnet_id                     = (known after apply)
        }
    }

  # azurerm_network_interface_security_group_association.mySecGroupAssociation1 will be created
  + resource "azurerm_network_interface_security_group_association" "mySecGroupAssociation1" {
      + id                        = (known after apply)
      + network_interface_id      = (known after apply)
      + network_security_group_id = (known after apply)
    }

  # azurerm_network_security_group.mySecGroup will be created
  + resource "azurerm_network_security_group" "mySecGroup" {
      + id                  = (known after apply)
      + location            = "eastus"
      + name                = "sshtrafficcp2"
      + resource_group_name = "kubernetes_rg_cp2"
      + security_rule       = [
          + {
              + access                                     = "Allow"
              + description                                = ""
              + destination_address_prefix                 = "*"
              + destination_address_prefixes               = []
              + destination_application_security_group_ids = []
              + destination_port_range                     = "22"
              + destination_port_ranges                    = []
              + direction                                  = "Inbound"
              + name                                       = "SSH"
              + priority                                   = 1001
              + protocol                                   = "Tcp"
              + source_address_prefix                      = "*"
              + source_address_prefixes                    = []
              + source_application_security_group_ids      = []
              + source_port_range                          = "*"
              + source_port_ranges                         = []
            },
        ]
      + tags                = {
          + "environment" = "CP2"
        }
    }

  # azurerm_public_ip.myPublicIp1 will be created
  + resource "azurerm_public_ip" "myPublicIp1" {
      + allocation_method       = "Dynamic"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + idle_timeout_in_minutes = 4
      + ip_address              = (known after apply)
      + ip_version              = "IPv4"
      + location                = "eastus"
      + name                    = "vmipcp2"
      + resource_group_name     = "kubernetes_rg_cp2"
      + sku                     = "Basic"
      + tags                    = {
          + "environment" = "CP2"
        }
    }

  # azurerm_resource_group.rg must be replaced
-/+ resource "azurerm_resource_group" "rg" {
      ~ id       = "/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg" -> (known after apply)
      ~ name     = "kubernetes_rg" -> "kubernetes_rg_cp2" # forces replacement
        tags     = {
            "environment" = "CP2"
        }
        # (1 unchanged attribute hidden)
    }

  # azurerm_storage_account.stAccount will be created
  + resource "azurerm_storage_account" "stAccount" {
      + access_tier                      = (known after apply)
      + account_kind                     = "StorageV2"
      + account_replication_type         = "LRS"
      + account_tier                     = "Standard"
      + allow_blob_public_access         = false
      + enable_https_traffic_only        = true
      + id                               = (known after apply)
      + is_hns_enabled                   = false
      + large_file_share_enabled         = (known after apply)
      + location                         = "eastus"
      + min_tls_version                  = "TLS1_0"
      + name                             = "staccountaezumcp2"
      + primary_access_key               = (sensitive value)
      + primary_blob_connection_string   = (sensitive value)
      + primary_blob_endpoint            = (known after apply)
      + primary_blob_host                = (known after apply)
      + primary_connection_string        = (sensitive value)
      + primary_dfs_endpoint             = (known after apply)
      + primary_dfs_host                 = (known after apply)
      + primary_file_endpoint            = (known after apply)
      + primary_file_host                = (known after apply)
      + primary_location                 = (known after apply)
      + primary_queue_endpoint           = (known after apply)
      + primary_queue_host               = (known after apply)
      + primary_table_endpoint           = (known after apply)
      + primary_table_host               = (known after apply)
      + primary_web_endpoint             = (known after apply)
      + primary_web_host                 = (known after apply)
      + resource_group_name              = "kubernetes_rg_cp2"
      + secondary_access_key             = (sensitive value)
      + secondary_blob_connection_string = (sensitive value)
      + secondary_blob_endpoint          = (known after apply)
      + secondary_blob_host              = (known after apply)
      + secondary_connection_string      = (sensitive value)
      + secondary_dfs_endpoint           = (known after apply)
      + secondary_dfs_host               = (known after apply)
      + secondary_file_endpoint          = (known after apply)
      + secondary_file_host              = (known after apply)
      + secondary_location               = (known after apply)
      + secondary_queue_endpoint         = (known after apply)
      + secondary_queue_host             = (known after apply)
      + secondary_table_endpoint         = (known after apply)
      + secondary_table_host             = (known after apply)
      + secondary_web_endpoint           = (known after apply)
      + secondary_web_host               = (known after apply)
      + tags                             = {
          + "environment" = "CP2"
        }
    }

  # azurerm_subnet.mySubnet will be created
  + resource "azurerm_subnet" "mySubnet" {
      + address_prefix                                 = (known after apply)
      + address_prefixes                               = [
          + "10.0.1.0/24",
        ]
      + enforce_private_link_endpoint_network_policies = false
      + enforce_private_link_service_network_policies  = false
      + id                                             = (known after apply)
      + name                                           = "terraformsubnetcp2"
      + resource_group_name                            = "kubernetes_rg_cp2"
      + virtual_network_name                           = "kubernetesnetcp2"
    }

  # azurerm_virtual_network.myNet will be created
  + resource "azurerm_virtual_network" "myNet" {
      + address_space         = [
          + "10.0.0.0/16",
        ]
      + guid                  = (known after apply)
      + id                    = (known after apply)
      + location              = "eastus"
      + name                  = "kubernetesnetcp2"
      + resource_group_name   = "kubernetes_rg_cp2"
      + subnet                = (known after apply)
      + tags                  = {
          + "environment" = "CP2"
        }
      + vm_protection_enabled = false
    }

Plan: 9 to add, 0 to change, 1 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

azurerm_resource_group.rg: Destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg]
azurerm_resource_group.rg: Still destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg, 10s elapsed]
azurerm_resource_group.rg: Still destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg, 20s elapsed]
azurerm_resource_group.rg: Still destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg, 30s elapsed]
azurerm_resource_group.rg: Still destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg, 40s elapsed]
azurerm_resource_group.rg: Still destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg, 50s elapsed]
azurerm_resource_group.rg: Still destroying... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg, 1m0s elapsed]
azurerm_resource_group.rg: Destruction complete after 1m6s
azurerm_resource_group.rg: Creating...
azurerm_resource_group.rg: Creation complete after 3s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2]
azurerm_public_ip.myPublicIp1: Creating...
azurerm_virtual_network.myNet: Creating...
azurerm_network_security_group.mySecGroup: Creating...
azurerm_storage_account.stAccount: Creating...
azurerm_public_ip.myPublicIp1: Creation complete after 6s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/publicIPAddresses/vmipcp2]
azurerm_network_security_group.mySecGroup: Creation complete after 6s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_virtual_network.myNet: Creation complete after 7s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2]
azurerm_subnet.mySubnet: Creating...
azurerm_storage_account.stAccount: Still creating... [10s elapsed]
azurerm_subnet.mySubnet: Creation complete after 6s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2/subnets/terraformsubnetcp2]
azurerm_network_interface.myNic1: Creating...
azurerm_network_interface.myNic1: Creation complete after 5s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2]
azurerm_network_interface_security_group_association.mySecGroupAssociation1: Creating...
azurerm_storage_account.stAccount: Still creating... [20s elapsed]
azurerm_network_interface_security_group_association.mySecGroupAssociation1: Creation complete after 4s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2|/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_storage_account.stAccount: Creation complete after 26s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Storage/storageAccounts/staccountaezumcp2]
azurerm_linux_virtual_machine.myVM1: Creating...
azurerm_linux_virtual_machine.myVM1: Still creating... [10s elapsed]
azurerm_linux_virtual_machine.myVM1: Still creating... [20s elapsed]
azurerm_linux_virtual_machine.myVM1: Still creating... [30s elapsed]
azurerm_linux_virtual_machine.myVM1: Still creating... [40s elapsed]
azurerm_linux_virtual_machine.myVM1: Still creating... [50s elapsed]
azurerm_linux_virtual_machine.myVM1: Creation complete after 56s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Compute/virtualMachines/my-first-azure-vm-cp2]

Apply complete! Resources: 9 added, 0 changed, 1 destroyed.
ubuntu@ubuntu-zisac:~/terraform_cp2$
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/azurerm from the dependency lock file
- Using previously-installed hashicorp/azurerm v2.46.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform plan
╷
│ Error: Unsupported block type
│
│   on acr.tf line 7, in resource "azurerm_container_registry" "acr":
│    7:   georeplications {
│
│ Blocks of type "georeplications" are not expected here.
╵
╷
│ Error: Unsupported block type
│
│   on acr.tf line 12, in resource "azurerm_container_registry" "acr":
│   12:   georeplications {
│
│ Blocks of type "georeplications" are not expected here.
╵
ubuntu@ubuntu-zisac:~/terraform_cp2$ vim acr.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ ls
acr.tf  main.tf  network.tf  security.tf  terraform.tfstate  terraform.tfstate.backup  vars.tf  vm.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ vim network.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ vim acr.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/azurerm from the dependency lock file
- Using previously-installed hashicorp/azurerm v2.46.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform plan
╷
│ Error: Unsupported argument
│
│   on acr.tf line 8, in resource "azurerm_container_registry" "acr":
│    8:   georeplications     = [
│
│ An argument named "georeplications" is not expected here.
╵
ubuntu@ubuntu-zisac:~/terraform_cp2$ vim acr.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ vim acr.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/azurerm from the dependency lock file
- Using previously-installed hashicorp/azurerm v2.46.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform plan
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2]
azurerm_virtual_network.myNet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2]
azurerm_public_ip.myPublicIp1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/publicIPAddresses/vmipcp2]
azurerm_network_security_group.mySecGroup: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_storage_account.stAccount: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Storage/storageAccounts/staccountaezumcp2]
azurerm_subnet.mySubnet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2/subnets/terraformsubnetcp2]
azurerm_network_interface.myNic1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2]
azurerm_network_interface_security_group_association.mySecGroupAssociation1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2|/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_linux_virtual_machine.myVM1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Compute/virtualMachines/my-first-azure-vm-cp2]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_container_registry.acr will be created
  + resource "azurerm_container_registry" "acr" {
      + admin_enabled       = false
      + admin_password      = (sensitive value)
      + admin_username      = (known after apply)
      + id                  = (known after apply)
      + location            = "eastus"
      + login_server        = (known after apply)
      + name                = "acraezumcp2"
      + network_rule_set    = (known after apply)
      + resource_group_name = "kubernetes_rg_cp2"
      + retention_policy    = (known after apply)
      + sku                 = "Premium"
      + trust_policy        = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform apply
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2]
azurerm_virtual_network.myNet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2]
azurerm_public_ip.myPublicIp1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/publicIPAddresses/vmipcp2]
azurerm_network_security_group.mySecGroup: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_storage_account.stAccount: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Storage/storageAccounts/staccountaezumcp2]
azurerm_subnet.mySubnet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2/subnets/terraformsubnetcp2]
azurerm_network_interface.myNic1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2]
azurerm_network_interface_security_group_association.mySecGroupAssociation1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2|/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_linux_virtual_machine.myVM1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Compute/virtualMachines/my-first-azure-vm-cp2]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_container_registry.acr will be created
  + resource "azurerm_container_registry" "acr" {
      + admin_enabled       = false
      + admin_password      = (sensitive value)
      + admin_username      = (known after apply)
      + id                  = (known after apply)
      + location            = "eastus"
      + login_server        = (known after apply)
      + name                = "acraezumcp2"
      + network_rule_set    = (known after apply)
      + resource_group_name = "kubernetes_rg_cp2"
      + retention_policy    = (known after apply)
      + sku                 = "Premium"
      + trust_policy        = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

azurerm_container_registry.acr: Creating...
azurerm_container_registry.acr: Still creating... [10s elapsed]
azurerm_container_registry.acr: Creation complete after 13s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.ContainerRegistry/registries/acraezumcp2]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.







ubuntu@ubuntu-zisac:~/terraform_cp2$ vim kubernetes.tf
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/azurerm from the dependency lock file
^[[A^[[A- Using previously-installed hashicorp/azurerm v2.46.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform plan
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2]
azurerm_container_registry.acr: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.ContainerRegistry/registries/acraezumcp2]
azurerm_network_security_group.mySecGroup: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_virtual_network.myNet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2]
azurerm_public_ip.myPublicIp1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/publicIPAddresses/vmipcp2]
azurerm_storage_account.stAccount: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Storage/storageAccounts/staccountaezumcp2]
azurerm_subnet.mySubnet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2/subnets/terraformsubnetcp2]
azurerm_network_interface.myNic1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2]
azurerm_network_interface_security_group_association.mySecGroupAssociation1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2|/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_linux_virtual_machine.myVM1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Compute/virtualMachines/my-first-azure-vm-cp2]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_kubernetes_cluster.kubecp2 will be created
  + resource "azurerm_kubernetes_cluster" "kubecp2" {
      + dns_prefix              = "akscp2"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + kube_admin_config       = (known after apply)
      + kube_admin_config_raw   = (sensitive value)
      + kube_config             = (known after apply)
      + kube_config_raw         = (sensitive value)
      + kubelet_identity        = (known after apply)
      + kubernetes_version      = (known after apply)
      + location                = "eastus"
      + name                    = "akscp2"
      + node_resource_group     = (known after apply)
      + private_cluster_enabled = (known after apply)
      + private_fqdn            = (known after apply)
      + private_link_enabled    = (known after apply)
      + resource_group_name     = "kubernetes_rg_cp2"
      + sku_tier                = "Free"
      + tags                    = {
          + "Environment" = "Production"
        }

      + default_node_pool {
          + max_pods             = (known after apply)
          + name                 = "default"
          + node_count           = 1
          + orchestrator_version = (known after apply)
          + os_disk_size_gb      = (known after apply)
          + os_disk_type         = "Managed"
          + type                 = "VirtualMachineScaleSets"
          + vm_size              = "Standard_D2s_v3"
        }

      + service_principal {
          + client_id     = "2774f7c1-9388-49ea-8b91-d277543762c4"
          + client_secret = (sensitive value)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + client_certificate = (known after apply)
  + kube_config        = (sensitive value)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
ubuntu@ubuntu-zisac:~/terraform_cp2$ terraform apply
azurerm_resource_group.rg: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2]
azurerm_public_ip.myPublicIp1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/publicIPAddresses/vmipcp2]
azurerm_container_registry.acr: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.ContainerRegistry/registries/acraezumcp2]
azurerm_virtual_network.myNet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2]
azurerm_network_security_group.mySecGroup: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_storage_account.stAccount: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Storage/storageAccounts/staccountaezumcp2]
azurerm_subnet.mySubnet: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/virtualNetworks/kubernetesnetcp2/subnets/terraformsubnetcp2]
azurerm_network_interface.myNic1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2]
azurerm_network_interface_security_group_association.mySecGroupAssociation1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkInterfaces/vmniccp2|/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Network/networkSecurityGroups/sshtrafficcp2]
azurerm_linux_virtual_machine.myVM1: Refreshing state... [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourceGroups/kubernetes_rg_cp2/providers/Microsoft.Compute/virtualMachines/my-first-azure-vm-cp2]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # azurerm_kubernetes_cluster.kubecp2 will be created
  + resource "azurerm_kubernetes_cluster" "kubecp2" {
      + dns_prefix              = "akscp2"
      + fqdn                    = (known after apply)
      + id                      = (known after apply)
      + kube_admin_config       = (known after apply)
      + kube_admin_config_raw   = (sensitive value)
      + kube_config             = (known after apply)
      + kube_config_raw         = (sensitive value)
      + kubelet_identity        = (known after apply)
      + kubernetes_version      = (known after apply)
      + location                = "eastus"
      + name                    = "akscp2"
      + node_resource_group     = (known after apply)
      + private_cluster_enabled = (known after apply)
      + private_fqdn            = (known after apply)
      + private_link_enabled    = (known after apply)
      + resource_group_name     = "kubernetes_rg_cp2"
      + sku_tier                = "Free"
      + tags                    = {
          + "Environment" = "Production"
        }

      + default_node_pool {
          + max_pods             = (known after apply)
          + name                 = "default"
          + node_count           = 1
          + orchestrator_version = (known after apply)
          + os_disk_size_gb      = (known after apply)
          + os_disk_type         = "Managed"
          + type                 = "VirtualMachineScaleSets"
          + vm_size              = "Standard_D2s_v3"
        }

      + service_principal {
          + client_id     = "2774f7c1-9388-49ea-8b91-d277543762c4"
          + client_secret = (sensitive value)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + client_certificate = (known after apply)
  + kube_config        = (sensitive value)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

azurerm_kubernetes_cluster.kubecp2: Creating...
azurerm_kubernetes_cluster.kubecp2: Still creating... [10s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [20s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [30s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [40s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [50s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [1m0s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [1m10s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [1m20s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [1m30s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [1m40s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [1m50s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [2m1s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [2m11s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [2m21s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [2m31s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [2m41s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [2m51s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [3m1s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [3m11s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [3m21s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [3m31s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [3m41s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [3m51s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [4m1s elapsed]
azurerm_kubernetes_cluster.kubecp2: Still creating... [4m11s elapsed]
azurerm_kubernetes_cluster.kubecp2: Creation complete after 4m15s [id=/subscriptions/07239b14-e164-471b-8670-bef9b897d813/resourcegroups/kubernetes_rg_cp2/providers/Microsoft.ContainerService/managedClusters/akscp2]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

client_certificate = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZIakNDQXdhZ0F3SUJBZ0lSQU81YndaSmhjcS9rV2xmSDIzZ0RvRjh3RFFZSktvWklodmNOQVFFTEJRQXcKRFRFTE1Ba0dBMVVFQXhNQ1kyRXdIaGNOTWpRd016RTRNREl6TmpNNVdoY05Nall3TXpFNE1ESTBOak01V2pBdwpNUmN3RlFZRFZRUUtFdzV6ZVhOMFpXMDZiV0Z6ZEdWeWN6RVZNQk1HQTFVRUF4TU1iV0Z6ZEdWeVkyeHBaVzUwCk1JSUNJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBZzhBTUlJQ0NnS0NBZ0VBcmVwNkV6YXp5ZnhZcEt0UXpVb0kKSlV3TFRQT2JuZGw2VjBkOG1kMzNaK1BWc0RRTWh5bmhwVlNSTEdWNklGSW5jeXdZQkg4b0lNdlRkMmxvS0d2NAprSUZJRXRleEIySy9XNWl4czhuQSs3VGpnczVlbDRkZVM0SnNCMGQwN3owN2FYbmI4elV4a2tNSUhNM2o3VWR5CnU2dGtVZkdqcHY0eWVuMnp0b2FrTmNPeitJaXc1WGMwOGtjRGM2Z29aZ012bk1wY2RyUE5SZjBsRGFVMU96U2oKVkcwM2lqbWdNUUozZ3ZPT21jNHhJeCsxb0NMeHpzZ29Yc1h6UFpkUUpXVDh6VWs2aTdYVFBBc1JTQUMrb2lUdQpsaFZCRkdJV1NnSnNHSmRVRERvaEZ5RGZxWVV1S3dMSURJTUVhTmNJZ283TjBFYlBqYUV5dzkxNklGUFc5YUFXCmZHYjVWK0RmSHpCdkc2TEFrZ1VzMUN6TTBNTE1aNWJoemtncDYyVFJtVmFjTnZ4V29nNkE4M203azUycHNham0KeWNWdU55dzByWEo2d0RsdDhkWHRNbHJHbjVvak5tL3hLVk9tTnY2MHZ1UE1YNkRUK1VsdU15T202ek0xSVlNaAorSW9OY0crUFc4NmxPMDMreklweDgyT1ZqckQ1QnZ1NitTVTdZQ3YwU3BKOXA1TzN1QS8wOVFJUXZRTVFpTWhLCk9MUTVob0ZLdFFWTCt4U3ZDR3N6elFXeDhYZUJ3bVlzV0hvK2lFZTc0eDZFaytqWDB5amt3T3VpOEduRW1YNWoKSXdjWjVFTTF5UDBDRlJDMElReE11OTRWaXo2dVJoV1Y2d2hoaWROelhhOU4zNmMwaU04SFNvM0tiMU53S2pFMgoyN2RzRlNTUXJ4YUNhbkhUeEw1QnQ4c0NBd0VBQWFOV01GUXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkCkpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdId1lEVlIwakJCZ3dGb0FVSXhQWTJ4YlEKaVQ0eG1qc0p5UWYzVHEvc3MzWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnSUJBSC9GYWh3MmZGeXYwWCthalgyKwpTNnJ6T0txUkg0blFhSlVUOFlZYTR4Rmh2a09kcjJwbDB5U1BxOEpsOEtWYTM5VTRJcEZRMStYdFp3NVZFbUhqCkJaYWR4dk5VY1ExSUYvVitOemdQTGZIZHN1RWYzK2JyL2FadGliTWhNRDhoaGpnQ0FTZlovWlRDSmlkY1ArUWIKTlFrNk9RQjBCcGFabmZVT004TmtrRzNkT3labVpDVlNVb1YrbXhIZkduREU2ZXhTLzZkUy9NV1pXUTI4SnpYbApTcTFjQjVudW5vUXIzNHBHUTlvRDYrUUZnY0xrc2pFS0JXMEZ2NDZkN05WM2xKT1E5d2pRUWU3c1JwTG92Umc4CjZlM3RyOUtmVUlSZEpGMUVHQ3R1NWMzUjdpM2lZajNlWVZhMGZjZmJhVDlUdFFud1gzT3d6dmR4T2xLTURrUDEKOElFVkpPVklmNVByWXpDcjRRM3BKUFJSaFcwZkZQcFA4VzdFY2cwUmppZmEvUFIvd2VlQ0pjSGtGNGNLZHFsQgpmd1lGR1Ura20rQ2c3dklJdExYOWV0UnpsN0lDY29ZWEYyd1IxVi91eHdsZzEzRzhSTXE3YTBkZWJ6OHpUTHNpCmZZWDFpVkY2WkZPYVBBdWlpZkhybWJXODMxWlREY0xNNElVM25DZ0I1bzRFenNsSmR2U2lHSDU5aGgzU2hzL08KdnBYL0dGaUJEbHNtUG1UajVGM0RVQUxmUStId1o5S3EydzAzRzM0YlJsSk4vTTJQc3BjeGMrTnFaWFhJeVgzMgpKblpHdnNJalJkd3F2UFN6RmJKMjFTM2I0cnRHVFNFU2FoMXIrMzVXWVpjVGJaamlMQUpOL21kL2VpRmsrYlNGCktuNnp6WUUrMEsvQ2NNWDArOTRxanRVRAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
kube_config = <sensitive>
ubuntu@ubuntu-zisac:~/terraform_cp2$
